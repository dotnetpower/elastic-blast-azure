---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: create-workspace
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: create-workspace
  template:
    metadata:
      labels:
        name: create-workspace
    spec:
      containers:
      - name: create-dir
        image: busybox
        command:
        - sh
        - -c
        - "mkdir -p /workspace && chmod 777 /workspace && sleep infinity"
        volumeMounts:
        - name: host-workspace
          mountPath: /workspace
      volumes:
      - name: host-workspace
        hostPath:
          path: /workspace
          type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux

---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-ssd-${NODE_ORDINAL}
  labels:
    app: setup
spec:
  template:
    metadata:
      labels:
        app: setup
    spec:
      volumes:
      - name: blastdb
        hostPath:
          path: "/workspace"
      containers:
      - name: ${K8S_JOB_GET_BLASTDB}
        image: ${ELB_DOCKER_IMAGE}
        workingDir: /blast/blastdb
        volumeMounts:
        - name: blastdb
          mountPath: /blast/blastdb
          subPath: blast
        env:
        - name: BLAST_USAGE_REPORT
          value: "false"
        command: ["/bin/bash", "-c"]
        args:
        - echo "BASH version ${BASH_VERSION}";
          echo "job-init-local-ssd-aks.yaml.template";
          start=`date +%s`;
          azcopy login --identity
          sleep 30;
          log() { ts=`date +'%F %T'`; printf '%s RUNTIME %s %f seconds\n' "$ts" "$1" "$2"; };
          if [ -z '${ELB_DB_PATH}' ]; then
            echo update_blastdb.pl ${ELB_DB} --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose;
            update_blastdb.pl ${ELB_DB} --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose;
            exit_code=$?;
          else
            echo azcopy cp '${ELB_DB_PATH}' .;
            azcopy cp '${ELB_DB_PATH}' .;
            exit_code=$?;
            [ $exit_code -eq 0 ] || exit $exit_code;
            [ -f ${ELB_DB}.tar.gz ] && tar xzf ${ELB_DB}.tar.gz;
            [ -f ${ELB_DB}.tar.gz ] && rm ${ELB_DB}.tar.gz;
          fi;
          echo update_blastdb.pl taxdb --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose;
          update_blastdb.pl taxdb --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose;
          end=`date +%s`;
          log "download-blastdbs" $(($end-$start));
          [ $exit_code -eq 0 ] || exit $exit_code;
          echo blastdbcmd -info -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE};
          blastdbcmd -info -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE};
          exit_code=$?;
          [ $exit_code -eq 0 ] || exit $exit_code;
          echo blastdbcheck -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE} -no_isam -ends 5;
          blastdbcheck -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE} -no_isam -ends 5;
          exit_code=$?;
          [ $exit_code -eq 0 ] || exit $exit_code;
          if [ ! -z "${ELB_TAXIDLIST}" ] ; then
              azcopy cp '${ELB_TAXIDLIST}' /blast/blastdb;
              exit_code=$?;
          fi;
          exit $exit_code;
      - name: ${K8S_JOB_IMPORT_QUERY_BATCHES}
        image: ${ELB_IMAGE_QS}
        workingDir: /blast/queries
        volumeMounts:
        - name: blastdb
          mountPath: /blast/queries
          readOnly: false
        command: ["run.sh", "-i", "${INPUT_QUERY}", "-o", "${ELB_RESULTS}", "-b", "${BATCH_LEN}", "-c", "${COPY_ONLY}", "-q", "/blast/queries/"]
      restartPolicy: Never
      nodeSelector:
        ordinal: "${NODE_ORDINAL}"
  backoffLimit: 3
  activeDeadlineSeconds: ${TIMEOUT}
